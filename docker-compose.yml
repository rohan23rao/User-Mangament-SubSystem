services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: userms
      POSTGRES_USER: userms
      POSTGRES_PASSWORD: userms_password
    ports:
      - "5434:5432"  # CHANGED: Fixed port conflict (was 5433, conflicted with kratos-postgres)
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - intranet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U userms -d userms"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Add this new service for Kratos database
  kratos-postgres:
    image: postgres:15-alpine
    container_name: userms-kratos-postgres
    environment:
      POSTGRES_DB: kratos
      POSTGRES_USER: kratos
      POSTGRES_PASSWORD: kratos_password
    volumes:
      - kratos_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - intranet  # CHANGED: Use your existing network name 'intranet' instead of 'userms-network'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kratos -d kratos"]
      interval: 10s
      timeout: 5s
      retries: 5

  kratos-migrate:
    image: oryd/kratos:v1.0.0
    environment:
      - DSN=postgres://kratos:kratos_password@kratos-postgres:5432/kratos?sslmode=disable  # CHANGED: Point to kratos database
    volumes:
      - type: bind
        source: ./config/kratos
        target: /etc/config/kratos
        read_only: true
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    networks:
      - intranet
    depends_on:
      kratos-postgres:  # CHANGED: Depend on kratos-postgres instead of postgres
        condition: service_healthy

  kratos:
    depends_on:
      - kratos-migrate
    image: oryd/kratos:v1.0.0
    ports:
      - '4433:4433' # public
      - '4434:4434' # admin
    restart: unless-stopped
    environment:
      - DSN=postgres://kratos:kratos_password@kratos-postgres:5432/kratos?sslmode=disable  # CHANGED: Point to kratos database
      - LOG_LEVEL=trace
      - GOOGLE_CLIENT_ID=165106799463-ijl47hp8fco7abh6hcsu453lb4kvqjlf.apps.googleusercontent.com
      - GOOGLE_CLIENT_SECRET=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
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    volumes:
      - type: bind
        source: ./config/kratos
        target: /etc/config/kratos
        read_only: true
    networks:
      - intranet

  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - KRATOS_PUBLIC_URL=http://kratos:4433
      - KRATOS_ADMIN_URL=http://kratos:4434
      - DATABASE_URL=postgres://userms:userms_password@postgres:5432/userms?sslmode=disable  # UNCHANGED: Still points to your backend database
      - PORT=3000
    volumes:
      - ./:/app
      - /app/tmp  # Exclude tmp directory from volume mount
    networks:
      - intranet
    depends_on:
      postgres:
        condition: service_healthy
      kratos:
        condition: service_started
    restart: unless-stopped
    command: ["./main"]

  mailslurper:
    image: oryd/mailslurper:latest-smtps
    ports:
      - '4436:4436'
      - '4437:4437'
    networks:
      - intranet

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      # - REACT_APP_API_URL=http://localhost:3000
      # - REACT_APP_KRATOS_PUBLIC_URL=http://localhost:4433
      - REACT_APP_API_URL=http://172.16.1.65:3000
      - REACT_APP_KRATOS_PUBLIC_URL=http://172.16.1.65:4433
      - PORT=3001
      - GENERATE_SOURCEMAP=false
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Exclude node_modules from volume mount
    networks:
      - intranet
    depends_on:
      - kratos
      - backend
    restart: unless-stopped

networks:
  intranet:

volumes:
  postgres_data:
  kratos_postgres_data: